import java.io.File;
import java.io.IOException;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
public class BasicQueue {
	public static void main(String args[]) throws IOException {
		Scanner file = new Scanner(new File("maze.dat"));
		while(file.hasNext()) {
			// size of the board
			int size = file.nextInt();
			file.nextLine();

			// The whole board as one string
			String temp = file.nextLine();

			// Break up the tring into its respective size
			Scanner scan = new Scanner(temp);
			int[][] maze = new int[size][size];
			for(int k = 0; k < size; k++) {
				for(int j = 0; j < size; j++) {
					maze[k][j] = scan.nextInt();
				}
			}
			
			Queue<Path> queue = new LinkedList<>();
			queue.offer(new Path(maze, new boolean[maze.length][maze.length],  0, 0));
			
			boolean found = false;
			boolean[][] shortest = null;
			
			while(!found) {
				Path curr = queue.poll();
				int r = curr.currR;
				int c = curr.currC;
				boolena[][] previous = curr.previous;
				
				if(c == maze[0].length-1 && maze[r][c] == 1) {
					shortest = curr.previous;
				}
				
				if(c > -1 && r > -1 && r < maze.length && c < maze.length) {
					ir(r > 0 && !previous[r][c]) {
						queue.offer(curr.move(r-1, c));
					}
				}
			}
		}
	}
}
class Path {
	public boolean[][] previous; 
	public int[][] maze;
	public int currR;
	public int currC;
	
	public Path(int[][] maze, boolean[][] previous, int r, int c) {
		this.previous = previous;
		currR = r;
		currC = c;
		this.maze = maze;
		previous[r][c] = true;
		
	}
	public void move(int r, int c) {
		
	}
}