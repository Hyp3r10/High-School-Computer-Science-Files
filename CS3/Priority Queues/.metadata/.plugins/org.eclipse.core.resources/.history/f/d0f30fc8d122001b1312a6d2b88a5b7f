import java.util.ArrayList;

public class Disk implements Comparable<Disk> {
	private Integer remainingCapacityMB;	// The remaining amount of storage on this disk
	private ArrayList<Integer> partitions;	// A list of the size of the partitions on this disk
	private int diskNumber;					// A unique number indicating the number disk this is in the drive bay
	/**
	 * Default constructor that initialized this disk to have 1GB (1000MB) of data
	 * as well as a blank set of partition sizes in the disk.
	 */
	public Disk(int discNum) {
		this.remainingCapacityMB = 1000;
		this.partitions = new ArrayList<Integer>();
		this..discNum = discNum;
	}
	/**
	 * Determines if there is enough available space for the passed 
	 * partition size to be added to the disk.
	 * @param capacity	The storage size of the partition
	 * @return			Whether or not we can add this size to the partition
	 */
	public boolean canAdd(Integer capacity) {
		return (this.remainingCapacityMB - capacity) >= 0;
	}
	/**
	 * Adds the passed partition of storage to the disc
	 * @param other	The size of the partition in MBs
	 * @return		The size of the disk after the partition was added
	 */
	public int add(Integer other) {
		this.partitions.add(other);
		this.remainingCapacityMB -= other;
		return this.remainingCapacityMB;
	}
	@Override
	public boolean equals(Object other) {
		return this.remainingCapacityMB.equals(((Disk) other).remainingCapacityMB);
	}
	@Override
	public int compareTo(Disk o) {
		return this.remainingCapacityMB.compareTo(o.remainingCapacityMB);
	}
}
