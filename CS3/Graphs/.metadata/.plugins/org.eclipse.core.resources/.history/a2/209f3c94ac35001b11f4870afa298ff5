
public class TrailOfPrimes {

}
class Node implements Comparable<Node> {
	public int[] num;	// Handles this node's number
	/**
	 * Constructs a Node object with the passed number num
	 * @param num	The number that this node represents
	 */
	public Node(int num) {
		this.num = new int[4];
		String[] temp = ("" + num).split("");
		int i = 0;
		for(String curr : temp) {
			this.num[i++] = Integer.parseInt(curr);
		}
	}
	/**
	 * Tests to see if two nodes are identical
	 * @param other	The other Node object in question
	 * @return		Whether or not the two nodes are the same
	 */
	public boolean equals(Node other) {
		for(int i = 0; i < 4; i++) {
			if(other.num[i] != this.num[i]) {
				return false;
			}
		}
		return true;
	}
	@Override
	public int compareTo(Node other) {
		if(this.equals(other)) {
			return 0;
		}
		else {
			if(this.r < other.r) {
				return -1;
			}
			else if(this.r > other.r) {
				return 1;
			}
			else {
				if(this.c < other.c) {
					return -1;
				}
				else {
					return 1;
				}
			}
		}
	}
	public int getNumDifference(Node other) {
		int diff = 0;
		for(int i = 0; i < 4; i++) {
			if(other.num[i] != this.num[i]) {
				diff++;
			}
		}
		return diff;
	}
	@Override
	public String toString() {
		return "(" + this.r + ", " + this.c + ")";
	}
}