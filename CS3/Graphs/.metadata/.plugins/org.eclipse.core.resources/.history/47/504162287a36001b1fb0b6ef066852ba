import java.util.List;
import java.util.PriorityQueue;

public class Dijkstra {
	public Graph graph;
	public Dijkstra(Graph graph) {
		this.graph = graph;
	}
	private void dijkstra(int source, int destination) {
		Vertex[] vertices = graph.vertices;
		vertices[source].setDistanceTo(0.0);
		PriorityQueue<Vertex> toSearch = new PriorityQueue<Vertex>();
		toSearch.add(vertices[source]);
		while(!toSearch.isEmpty()) {
			Vertex curr = toSearch.poll();
			List<Integer> edges = curr.edges;
			curr.setVisited(true);
			int lowestIndex = -1;
			double lowestWeight = Double.MAX_VALUE;
			for(Integer node : edges) {
				vertices[node].setDistanceTo(curr.distance + curr.getDistanceTo(vertices[node]));
				if(vertices[node].distance < lowestWeight) {
					lowestWeight = vertices[node].distance;
					lowestIndex = node;
				}
			}
			toSearch.add(vertices[lowestIndex]);
		}
	}
}
