import java.io.File;
import java.io.IOException;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Stack;
import java.util.TreeMap;
import java.util.TreeSet;

public class Scooby {
	public static void main(String[] args) throws IOException {
		Scanner scan = new Scanner(new File("Data/scooby.dat"));
		int numTimes = scan.nextInt(); scan.next();
		for(int i = 0; i < numTimes; i++) {
			TreeMap<String, TreeSet<String>> graph = new TreeMap<String, TreeSet<String>>();
			// Instantiate the graph
			Scanner in = new Scanner(scan.nextLine());
			while(in.hasNext()) {
				// Parse the current pair into left and right
				String[] line = in.next().split("");
				// First to second
				TreeSet<String> tempSet = (graph.containsKey(line[0])) ? graph.get(line[0]) : new TreeSet<String>();
				tempSet.add(line[1]);
				graph.put(line[0], tempSet);
				// Second to first
				tempSet = (graph.containsKey(line[1])) ? graph.get(line[1]) : new TreeSet<String>();
				tempSet.add(line[0]);
				graph.put(line[1], tempSet);
			}
			// Get the start and end
			String[] line = scan.nextLine().split("");
			// Search for a path
			HashSet<String> searched = new HashSet<String>();
			System.out.println(line[0] + " " + line[1]);
			System.out.println(dfs(line[1], line[0], graph, searched) ? "yes" : "no");
		}
	}
	public static boolean dfs(String end, String curr, TreeMap<String, TreeSet<String>> graph, HashSet<String> visited) {
		if(curr.equals(end)) {
			return true;
		}
		if(!visited.contains(curr)) {
			visited.add(curr);
			TreeSet<String> toSearch = graph.get(curr);
			for(String search : toSearch) {
				boolean found = dfs(end, search, graph, visited);
				if(found) {
					return true;
				}
			}
		}
		return false;
	}
}
