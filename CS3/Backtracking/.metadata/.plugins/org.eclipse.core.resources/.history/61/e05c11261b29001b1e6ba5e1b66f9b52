import java.util.Arrays;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

public class BacktrackingProblems {
	public void climbStairs(int steps) {
		this.climbStairsHelper(0, steps, "");
	}
	private void climbStairsHelper(int currSteps, int totalSteps, String steps) {
		if(currSteps == totalSteps) {
			System.out.println(steps.substring(0, steps.length()-2));
		}
		else if(currSteps < totalSteps) {
			this.climbStairsHelper(currSteps + 1, totalSteps, steps + "1, ");
			this.climbStairsHelper(currSteps + 2, totalSteps, steps + "2, ");
		}
		else {
			return;
		}
	}
	public void campsite(int x, int y) {
		this.campsiteSolver(x, y, 0, 0, "");
	}
	private void campsiteSolver(int targetX, int targetY, int currX, int currY, String path) {
		if(currX == targetX && currY == targetY) {
			System.out.println(path.trim());
		}
		else if(currX <= targetX && currY <= targetY) {
			this.campsiteSolver(targetX, targetY, currX+1, currY, path + "E ");
			this.campsiteSolver(targetX, targetY, currX, currY+1, path + "N ");
			this.campsiteSolver(targetX, targetY, currX+1, currY+1, path + "NE ");
		}
		else {
			return;
		}
	}
	private int maxTotal;
	public int getMax(List<Integer> nums, int limit) {
		this.maxTotal = Integer.MIN_VALUE;
		for(int i = 0; i < nums.size(); i++) {
			this.knapsack(nums, limit, i, 0);
		}
		return this.maxTotal;
	}
	private int knapsack(List<Integer> nums, int limit, int index, int currTotal) {
		currTotal += nums.get(index);
		if(currTotal > limit) {
			return currTotal;
		}
		else {
			 index++;
			 for(int i = index; i < nums.size(); i++) {
				 int iterationTotal = knapsack(nums, limit, i, currTotal);
				 if(iterationTotal > maxTotal && iterationTotal <= limit) {
					 maxTotal = iterationTotal;
				 }
			 }
		}
		return currTotal;
	}
	public int makeChange(int amount) {
		return this.count(new int[] {1,5,10,25}, 4, amount);
	} 
	private int count(int[] coins, int m, int n) {
		if(n == 0) {
			return 1;
		}
		else if(n < 0) {
			return 0;
		}
		if(m <= 0 && n >= 1) {
			return 0;
		}
		return this.count(coins, m-1, n) + this.count(coins, m, n-coins[m-1]);
	}
	public void makeChangeCoinCount(int amount) {
		System.out.println("  P N D Q" + "\n------------");
		this.combinations = new TreeSet<Integer[]>();
		this.modifiedCount(amount, new int[] {0,0,0,0});
	}
	private Set<Integer[]> combinations;
	public void modifiedCount(int curr, int[] coinsBeingUsed) {
		if(curr == 0) {
			combinations.add((Integer[]) coinsBeingUsed);
		}
		if(curr < 0) {
			return;
		}
		else {
			coinsBeingUsed[0]++;
			this.modifiedCount(curr-1, coinsBeingUsed);
			coinsBeingUsed[0]--;
			coinsBeingUsed[1]++;
			this.modifiedCount(curr-5, coinsBeingUsed);
			coinsBeingUsed[1]--;
			coinsBeingUsed[2]++;
			this.modifiedCount(curr-10, coinsBeingUsed);
			coinsBeingUsed[2]--;
			coinsBeingUsed[3]++;
			this.modifiedCount(curr-25, coinsBeingUsed);
			coinsBeingUsed[3]--;
		}
	}
	
	
	
	
	public static void main(String[] args) {
		BacktrackingProblems tester = new BacktrackingProblems();
		System.out.println("Climb Stairs: ");
		System.out.println("----------------------------");
		tester.climbStairs(4);
		System.out.println("\n\nCampsite: ");
		System.out.println("----------------------------");
		tester.campsite(2, 1);
		System.out.println("\n\ngetMax: ");
		System.out.println("----------------------------");
		System.out.println(tester.getMax(Arrays.asList(30, 2, 8, 22, 6, 4, 20), 19));
		System.out.println("\n\nMake Change: ");
		System.out.println("----------------------------");
		System.out.println(tester.makeChange(25)); 
		System.out.println(tester.makeChange(100));	
		System.out.println("\n\nMake Change Coin Count: ");
		System.out.println("----------------------------");
		tester.makeChangeCoinCount(11); 
	}
}
