import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

public class Pascal {
	public TreeMap<Node, Integer> memo;
	public TreeMap<Integer, List<Integer>> pascal;
	public Pascal() {
		memo = new TreeMap<Node, Integer>();
		memo.put(new Node(0, 0), 1);
		pascal = new TreeMap<Integer, List<Integer>>();
	}
	public int pascal(int row, int col) {
		if(!pascal.containsKey(row)) {
			this.generateRow(row);
		}
		Node loc = new Node(row, col);
		if(row == 0 || col == 0 || col == row+1) {
			return 1;
		}
		if(row < 0 || col < 0) {
			return 0;
		}
		if(memo.containsKey(loc)) {
			return memo.get(loc);
		} 
		else {
			int result = pascal(row, col-1) + pascal(row-1, col);
			memo.put(loc, result);
			return result;
		}
		
	}
	public void generateRow(int row) {
		if(!pascal.containsKey(row-1)) {
			this.generateRow(row-1);
		}
		else {
			List<Integer> listForRow = new ArrayList<Integer>();
			for(int i = 0; i < row+1; i++) {
				Node loc = new Node(row, i);
				memo.put(loc, memo.get(new Node(row, i-1)) + memo.get(new Node(row-1, i)));
				listForRow.add(memo.get(loc));
			}
			this.pascal.put(row, listForRow);
		}
	}
	public void printPascalRow(int row) {
		String output = "";
		if(!pascal.containsKey(row)) {
			this.generateRow(row);
		}
		List<Integer> numsOnRow = pascal.get(row);
		for(Integer temp : numsOnRow) {
			output += temp + " ";
		}
		System.out.println(output.trim());
	}
	public static void main(String[] args) {
		Pascal tester = new Pascal();
		for(int i = 0; i < 10; i++) {
			tester.printPascalRow(i);
		}
	}
	class Node implements Comparable<Node> {
		public int r, c;
		public Node(int r, int c) {
			this.r = r;
			this.c = c;
		}
		public int compareTo(Node other) {
			if(this.r == other.r && this.c == other.c) {
				return 0;
			}
			else if(this.r < other.r) {
				return -1;
			}
			else if(this.r > other.r) {
				return 1; 
			}
			else {
				if(this.c < other.c) {
					return -1;
				}
				else {
					return 1;
				}
			}
		}
		
	}
}
