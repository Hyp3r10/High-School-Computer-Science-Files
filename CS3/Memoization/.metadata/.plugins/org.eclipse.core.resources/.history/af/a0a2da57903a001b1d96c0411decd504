import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Thievery {
	public static void main(String[] args) throws FileNotFoundException {
		Scanner scan = new Scanner(new File("Knapsack.dat"));
		Thievery tester = new Thievery();
		int numTimes = scan.nextInt(); scan.nextLine();
		while(numTimes-->0) {
			scan.nextLine();
			String[] line = scan.nextLine().split(" - ");
			int numItems = Integer.parseInt(line[0]);
			int maxWeight = Integer.parseInt(line[1]);
			scan.nextLine();
			int[] weights = new int[numItems];
			int[] vals = new int[numItems];
			line = scan.nextLine().split(", ");
			for(int i = 0; i < numItems; i++) {
				weights[i] = Integer.parseInt(line[i]);
			}
			line = scan.nextLine().split(", ");
			for(int i = 0; i < numItems; i++) {
				vals[i] = Integer.parseInt(line[i]);
			}
			Integer[][] dp = new Integer[numItems][maxWeight+1];
			System.out.println(tester.knapsack(dp, weights, vals, 0, maxWeight));
		}
	}
	public int knapsack(Integer[][] dp, int[] weights, int[] vals, int index, int capacity) {
		if(capacity <= 0 || index >= weights.length) {
			return 0;
		}
		if(dp[index][capacity] != null) {
			return dp[index][capacity];
		}
		int tempVal1 = 0;
		if(weights[index] <= capacity) {
			tempVal1 = vals[index] + knapsack(dp, weights, vals, index+1, capacity - weights[index]);
		}
		int tempVal2 = knapsack(dp, weights, vals, index+1, capacity);
		dp[index][capacity] = Math.max(tempVal1, tempVal2);
		return dp[index][capacity];
	}
}
