$PKGLINE
import java.awt.*;
import javax.swing.*;

/**
 * Class $CLASSNAME - 여기에 클래스 설명을 작성하시오.
 * 
 * @author
 * @version 
 */
public class $CLASSNAME extends JApplet
{
	// 인스턴스 변수 - 다음의 예제를 사용자에 맞게 바꾸시오.
	private int x;

	 /**
	 * 시스템에 로드되어진 JApplet을 알려주기 위해
	 * 브라우저나 애플릿 뷰어에 의해 호출됩니다. 
	 */ 

	public void init()
	{
	         // this is a workaround for a security conflict with current browsers
		// including Netscape & Internet Explorer which do not allow access to 
		// AWT system event queuen which JApplets do on startup to check access. 

                // 이 메소드는, JApplet들이 엑세스를 체크하기 위하여 기동되는  AWT 시스템 이벤트 큐에 
		      접근을 허용하지 않는 넷스케이프 및 인터넷 익스플로러등과 같은 브라우저들과의 
		      보안 사항이 충돌되는 여부에 관련된 작업을 시작한다.
		      
                
		JRootPane rootPane = this.getRootPane();	
		rootPane.putClientProperty("defeatSystemEventQueueCheck", Boolean.TRUE);
	
		// JApplet에 필요한 초기화를 제공하시오.

	}

	/**
	 * 애플릿 실행이 시작되어야 하는 JApplet를 알려주기 위해 
	 * 브라우저나 애플릿 뷰어에 의해 호출되어집니다.
	 * init 메소드가 호출된 이후에 JApplet이 웹페이지에 재방문되어질때마다 호출됩니다.
	 */
	public void start()
	{
		//웹 페이지가 방문되어질 때마다 실행될
		//코드를 제공하시오.

	}

	/** 
	 * 실행을 멈추어야 할 JApplet을 알려주기 위해 브라우저나 애플릿 뷰어에 
	 * 의해 호출됩니다. stop 메소드는 이 JApplet을 포함하는 웹 페이지가 
	 * 다른 웹 페이지로 바뀌거나 JApplet이 종료되어지기 바로 직전에 호출됩니다.
	 */
	public void stop()
	{
		// JApplet이 종료되기 전이나 다른 페이지에 의해 
		// 실행해야할 코드들을 제공하시오.

	}

	/**
	 * 할당된 모든 자원들이 종료되거나 반환되어야 하는 JApplet을 알려주기 위해
	 * 브라우저나 애플릿 뷰어에 의해 호출됩니다. stop 메소드는 항상 종료되기 전에 
	 * 호출되어질 것입니다.
	 */
	public void destroy()
	{
		// JAppplet이 종료될 때 실행할 코드를 제공하시오.
	
	}


	/**
	 * 이 애플릿에 대한 정보를 반환합니다.
	 * 애플릿은 JApplet의 저자, 버전, 저작권에 대한 정보를 포함하는 문자열을
	 * 반환하는 이 메소드를 오버라이드 해야할 것입니다.
	 *
	 * @return 이 JApplet에 대한 정보를 나타내는 문자열
	 */

	public String getAppletInfo()
	{
		// 애플릿에 대한 정보를 제공하시오
		return "Title:   \nAuthor:   \nA 간단한 애플릿 예제 설명. ";


	}


	/**
	 * 이 JApplet에 대한 매개변수 정보를 반환합니다.
	 * 이 JApplet으로 이해되는 것보다 더 많은 매개변수에 관한 정보를 반환합니다.
	 * 애플릿은 매개변수들을 설명할 문자열 배열을 반환하는 이 메소드를 오버라이드 
	 * 해야합니다.
	 * 배열의 각 요소는 이름, 형, 설명이 포함된 3개의 문자열 집합으로
	 * 구성되어야 합니다.
	 *
	 * @return JApplet에 대한 매개변수 정보를 나타내는 String[]
	 */
	public String[][] getParameterInfo()
	{
		// 애플릿에 대한 매개변수 정보를 제공하시오.
		String paramInfo[][] = {
				 {"firstParameter",	"1-10",	"description of first parameter"},
				 {"status", "boolean", "description of second parameter"},
				 {"images",   "url",	 "description of third parameter"}
		};
		return paramInfo;
	}

	/**
	 * 애플릿에 대한 Paint 메소드
	 * 
	 * @param  g   이 애플릿에 대한 Graphics 객체
	 */
	public void paint(Graphics g)
	{
		// 애플릿상에 보여지는 간단한 텍스트
		g.drawString("Sample JApplet", 20, 20);
	}


	/**
	 * 예제 메소드 - 이 주석을 사용자에 맞게 바꾸시오.
	 * 
	 * @param  y   메소드에 대한 예제 매개변수
	 * @return     x 와 y 의 합
	 */
	public int sampleMethod(int y)
	{
		// 사용자의 코드를 여기에 입력하시오.
		return x + y;
	}
}
