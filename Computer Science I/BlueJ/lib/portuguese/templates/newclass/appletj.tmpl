$PKGLINE
import java.awt.*;
import javax.swing.*;

/**
 * Classe $CLASSNAME - escreva uma descrição da classe aqui!
 * 
 * @author  
 * @version 
 */
public class $CLASSNAME extends JApplet
{
	// variaveis de instância - substitua o exemplo abaixo pelo seu código
	private int x;

	 /**
	 * Chamado pelo browser ou appletviewer para informar a este JApplet que ele
	 * foi carregado no sistema. Este método é sempre chamado antes da primeira
	 * chamada ao método start.
	 */
	public void init()
	{
		// isto é uma precaução para evitar conflitos de segurança com os browsers atuais
		// incluindo o Netscape e o Internet Explorer que não permitem o acesso a
		// fila de eventos do sistema AWT que JApplets fazem no startup para checar acessos. 
		JRootPane rootPane = this.getRootPane();	
		rootPane.putClientProperty("defeatSystemEventQueueCheck", Boolean.TRUE);
	
		// forneça uma inicialização adequada para o seu JApplet

	}

	/**
	 * Chamado pelo browser ou appletviewer para informar ao JApplet que
	 * ele deve iniciar sua execução. Ele é chamado após o método init
	 * a cada vez que a página do JApplet é revisitada. 
	 */
	public void start()
	{
		// forneça o código a ser executado cada vez
		// que a página for revisitada

	}

	/** 
	 * Chamado pelo browser ou appletviewer para informar ao JApplet que
	 * ele deve parar sua execução. Ele é chamado quando a página web que
	 * contém o JApplet tem que ser substituída por outra página, e também
	 * imediatamente antes do JApplet ser destruído.
	 */
	public void stop()
	{
		// forneça o código a ser executado quando
		// a página tiver que ser substituída ou o JAPplet destruído
	
	}

	/**
	 * Chamado pelo browser ou appletviewer para informar a este JApplet que
	 * sua área de memória está sendo desapropriada e que ele deve liberar os recursos
	 * que foram alocados. O método stop sempre será chamado antes de destroy.
	 */
	public void destroy()
	{
		// forneça o código a ser executado quando o JApplet tiver que ser destruído.
	
	}


	/**
	 * Retorna uma informação sobre este applet. 
	 * Um applet deve sobrescrever este método para retornar um String contendo
	 * informação sobre o autor, versão e copyright do JApplet.
	 *
	 * @return uma representação String das informações do JApplet
	 */
	public String getAppletInfo()
	{
		// forneça informações sobre o applet
		return "Titulo:   \nAutor:   \nUm exemplo simples de descrição de um applet. ";
	}


	/**
	 * Retorna informações de parâmetros deste JApplet. 
	 * Retorna informações sobre os parâmetros que são reconhecidos pelo JApplet.
	 * Um JApplet deve sobrescerver este método para retornar um arranjo de Strings 
	 * que descreva estes parâmetros. 
	 * Cada elemento do arranjo deve ser um conjunto de três informações que contenham
	 * o nome, o tipo e uma descrição.
	 *
	 * @return um String[] representação das informações dos parâmetros deste JApplet
	 */
	public String[][] getParameterInfo()
	{
		// forneça o arranjo de informações de parâmetros deste applet
		String paramInfo[][] = {
				 {"primeiroParametro",	"1-10",	"descrição do primeiro parâmetro"},
				 {"status", "boolean", "descrição do segundo parâmetro"},
				 {"imagens",   "url",	 "descrição do terceiro parâmetro"}
		};
		return paramInfo;
	}

	/**
	 * Método paint do JApplet.
	 * 
	 * @param  g   o objeto Graphics deste applet.
	 */
	public void paint(Graphics g)
	{
		// texto simples exibido pelo JApplet
		g.drawString("JApplet de exemplo", 20, 20);
	}


	/**
	 * Um exemplo de método - substitua este comentário pelo seu próprio
	 * 	
	 * @param  y   um parâmetro do método
	 * @return	 a soma de x com y 
	 */
	public int sampleMethod(int y)
	{
		// ponha seu código aqui
		return x + y;
	}
}
