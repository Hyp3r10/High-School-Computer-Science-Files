$PKGLINE
import java.awt.*;
import javax.swing.*;

/**
 * Classe $CLASSNAME - descrivi qui la classe
 * 
 * @author (il tuo nome)
 * @version (un numero di versione)
 */
public class $CLASSNAME extends JApplet
{
	// variabili d'istanza - sostituisci l'esempio che segue con il tuo
	private int x;

	 /**
	 * Richiamato dal browser o dall'appletviewer per informare il JApplet che
	 * è stato caricato nel sistema. E' sempre richiamato prima che il metodo
	 * start sia richiamato per la prima volta.
	 */
	public void init()
	{
		// questo è un trucco per aggirare un conflitto di sicurezza con i browser
		// attuali, compresi Netscape e Internet Explorer, i quali non consentono
		// l'accesso alla coda di eventi di sistema di AWT tentato dai JApplet.
		JRootPane rootPane = this.getRootPane();	
		rootPane.putClientProperty("defeatSystemEventQueueCheck", Boolean.TRUE);
	
		// aggiungi tutte le inizializzazioni necessarie al JApplet

	}

	/**
	 * Richiamato dal browser o dall'appletviewer per informare il JApplet che
	 * dovrebbe essere avviata l'esecuzione. E' richiamato dopo il metodo init
	 * e ogni volta che il JApplet è caricato in una pagina Web.
	 */
	public void start()
	{
		// aggiungi il codice necessario all'avvio
		// ogni volta che è caricata una pagina web

	}

	/** 
	 * Richiamato dal browser o dall'appletviewer per informare il JApplet che
	 * dovrebbe fermare la sua esecuzione. E' richiamato quando la pagina Web
	 * che contiene questo JApplet è stata sostituita da un'altra pagina, e anche
	 * subito prima che il JApplet sia distrutto. 
	 */
	public void stop()
	{
		// aggiungi il codice da eseguire quando la pagina è
		// sostituita da un'altra pagina o prima che il JApplet sia distrutto
	
	}

	/**
	 * metodo paint dell'applet.
	 * 
	 * @param  g   l'oggetto Graphics per questo applet
	 */
	public void paint(Graphics g)
	{
		// breve testo mostrato dall'applet
                g.setColor(Color.white);
                g.fillRect(0, 0, 200, 100);
                g.setColor(Color.black);
                g.drawString("Applet d'esempio", 20, 20);
                g.setColor(Color.blue);
                g.drawString("creato da BlueJ", 20, 40);

	}

	/**
	 * Richiamato dal browser o dall'appletviewer per informare il JApplet che
	 * deve rilasciare qualsiasi risorsa è stata allocata prima di essere
	 * distrutto. Prima del metodo destroy è sempre richiamato il metodo stop. 
	 */
	public void destroy()
	{
		// aggiungi il codice che dev'essere eseguito subito
		// prima della distruzione del JApplet.
	
	}


	/**
	 * Restituisce informazioni riguardo l'applet.
	 * Un applet dovrebbe ridefinire questo metodo in modo da restituire una String
	 * contenente informazioni sull'autore, la versione, il copyright del JApplet.
	 *
	 * @return String con informazioni su questo JApplet
	 */
	public String getAppletInfo()
	{
		// aggiungi le principali informazioni riguardo l'applet.
		return "Titolo:   \nAutore:   \nUna breve descrizione dell'applet. ";
	}


	/**
	 * Restituisce informazioni sui parametri del JApplet.
	 * Restituisce informazioni circa i parametri che sono accettati dal JApplet.
	 * Un applet dovrebbe ridefinire questo metodo per restituire un array
	 * di String che descrivono i parametri.
	 * Ciascun elemento dell'array dovrebbe consistere in tre String contenenti il nome,
	 * il tipo ed una descrizione.
	 *
	 * @return String[] con informazioni sui parametri di questo JApplet
	 */
	public String[][] getParameterInfo()
	{
		// fornisce informazioni sui parametri dell'applet
		String paramInfo[][] = {
				 {"firstParameter",	"1-10",	"descrizione del primo parametro"},
				 {"status", "boolean", "descrizione del secondo parametro"},
				 {"images",   "url",	 "descrizione del terzo parametro"}
		};
		return paramInfo;
	}
}
