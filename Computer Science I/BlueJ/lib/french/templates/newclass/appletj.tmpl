$PKGLINE
import java.awt.*;
import javax.swing.*;

/**
 * Classe $CLASSNAME - décrivez la classe ici
 *
 * @author:  (votre nom)
 * @version: (un numéro de version ou une date)
 */
public class $CLASSNAME extends JApplet
{
    // variable d'instance - remplacez cet exemple par le vôtre
    private int x;

    /**
     * Appelée par le navigateur ou le visualiseur afin de signaler à l'Applet
     * qu'il est maintenant pris en charge par le système.
     * Il est garanti que ceci précédera le premier appel de la méthode start.
     */
    public void init()
    {
        // Il y a un conflit de sécurité avec les navigateurs courants (incluant
        // Netscape & Internet Explorer) qui interdisent l'accès à la queue
        // d'événements d'AWT -- ce dont les JApplets ont besoin au démarrage.
        JRootPane rootPane = this.getRootPane();
        rootPane.putClientProperty("defeatSystemEventQueueCheck", Boolean.TRUE);

        // autre initialisation nécessaire pour votre JApplet

    }

    /**
     * Appelée par le navigateur ou le visualiseur pour signaler à l'Applet
     * qu'il devrait commencer à s'exécuter.  Ceci se produit après l'appel
     * de init et chaque fois que la page Web est actualisée.
     */
    public void start()
    {
        // Insérez ici le code qui doit s'exécuter chaque fois
        // que la page Web est actualisée.

    }

    /**
     * Appelée par le navigateur ou le visualiseur afin de signaler à l'Applet
     * qu'il doit arrêter de s'exécuter. Ceci se produit lorsque la page
     * Web qui contient l'Applet est remplacée par une autre, ou encore
     * juste avant que l'Applet ne soit détruit. Si vous n'avez pas de
     * ressources à libérer (comme des fils d'exécution à stopper),
     * vous pouvez supprimer cette méthode.
     */
    public void stop()
    {
        // Insérez le code à exécuter lorsque l'Applet est arrêté
    }

    /**
     * Méthode Paint de l'applet.
     *
     * @param  g   l'objet Graphics de cet applet
     */
    public void paint(Graphics g)
    {
        // texte affiché par l'applet
        g.setColor(Color.white);
        g.fillRect(0, 0, 200, 100);
        g.setColor(Color.black);
        g.drawString("JApplet modèle", 20, 20);
        g.setColor(Color.blue);
        g.drawString("created by BlueJ", 20, 40);
    }

    /**
     * Appelée par le navigateur ou le visualiseur afin de signaler à l'Applet
     * qu'il est sur le point d'être détruit. Si vous n'avez pas de ressources
     * à libérer, vous pouvez supprimer cette méthode.
     */
    public void destroy()
    {
        // Insérez le code à exécuter lorsque l'Applet est détruit.
    }


    /**
     * Retourne quelques renseignements à propos de cet applet.
     * Un applet devrait remplacer cette méthode afin de retourner un String
     * décrivant l'auteur, la version et les droits d'auteur.
     *
     * @return une String décrivant l'Applet
     */
    public String getAppletInfo()
    {
        // Retournez les informations que vous souhaitez
        return "Titre : Applet démo BlueJ\n" +
                "Auteur : Bruce Quig\n" +
                "Une description d'applet typique.";
    }


    /**
     * Retourne quelques renseignements à propos des paramètres acceptés
     * par l'Applet. Vous devriez retourner un tableau de Strings décrivant
     * chaque paramètre séparément (premier indice).
     * Le second indice du tableau correspond aux nom, type et description
     * de chaque paramètre.
     *
     * @return  un String[][] décrivant l'Applet
     */
    public String[][] getParameterInfo()
    {
        // Décrivez vos paramètres ici
        String paramInfo[][] = {
                {"firstParameter",  "1-10",    "description du premier paramètre"},
                {"secondParameter", "boolean", "description du second paramètre"}
                {"images",          "url",     "description du troisième paramètre"}
        };
        return paramInfo;
    }
}
