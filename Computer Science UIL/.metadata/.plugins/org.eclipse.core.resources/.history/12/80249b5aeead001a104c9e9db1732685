import java.util.ArrayList;

class Solution {
	public static void main(String[] args) {
		System.out.println(minDays(new int[] {1,10,3,10,2}, 3, 1));
	}
	public static int minDays(int[] bloomDay, int m, int k) {
        if((m * k) > bloomDay.length) {
            return -1;
        }
        else {
            ArrayList<Flower> flowers = new ArrayList<Flower>();
            for(int days : bloomDay) {
                flowers.add(new Flower(days, k));
            }
            boolean allBouquetsMade = false;
            int numMade = 0;
            int time = 0;
            while(!allBouquetsMade) {
                if(numMade >= m) {
                    allBouquetsMade = true;
                }
                else {
                    flowers = increaseDay(flowers);
                    numMade = getNumBouquets(flowers, m);
                    time++;
                }
            }
            return time;
        }
    }
    public static ArrayList<Flower> increaseDay(ArrayList<Flower> flowers) {
        for(int i = 0; i < flowers.size(); i++) {
            Flower temp = flowers.get(i);
            temp.decreaseDays();
            flowers.set(i, temp);
        }
        return flowers;
    }
    public static int getNumBouquets(ArrayList<Flower> flowers, int m) {
        int numBouquets = 0;
        for(int i = 0; i < flowers.size();) {
            if(flowers.get(i).isBloomed()) {
                if(m == 1) {
                    numBouquets++;
                    i++;
                }
                else {
                    int count = 1;
                    if(i+1 < flowers.size()) {
                        for(int j = 1; j < m; j++) {
                            if(!flowers.get(i+j).isBloomed()) {
                                i = i+j;
                                j = m;
                            }
                            else {
                                count++;
                            }
                        }
                        if(count == m) {
                            numBouquets++;
                            i = i + m;
                        }
                    }
                }
            }
        }
        return numBouquets;
    }
}
class Flower {
    public int numDaysTillBloom;
    public int orriginalDaysTillBloom;
    public int numFlowersInBoquet;
    public Flower(int orriginalDays, int num) {
        this.numDaysTillBloom = orriginalDays;
        this.orriginalDaysTillBloom = orriginalDays;
        this.numFlowersInBoquet = num;
    }
    public void decreaseDays() {
        numDaysTillBloom--;
    }
    public boolean isBloomed() {
        return numDaysTillBloom <= 0;
    }
    public String toString() {
    	return "" + numDaysTillBloom;
    }
}